import customtkinter as ctk
import serial
import threading
import time

class LoRaMessenger:
    def __init__(self, root):
        self.root = root
        self.root.title("LoRa Messenger")
        self.root.geometry("400x600")

        self.name = ctk.StringVar()
        self.com_port = ctk.StringVar()
        self.baud_rate = ctk.StringVar(value="9600")

        self.create_initial_page()
        self.ser = None

    def create_initial_page(self):
        self.initial_frame = ctk.CTkFrame(self.root)
        self.initial_frame.pack(fill=ctk.BOTH, expand=True, padx=20, pady=20)

        ctk.CTkLabel(self.initial_frame, text="Enter Your Name:").pack(pady=5)
        self.name_entry = ctk.CTkEntry(self.initial_frame, textvariable=self.name)
        self.name_entry.pack(pady=5)

        ctk.CTkLabel(self.initial_frame, text="COM Port:").pack(pady=5)
        self.com_port_entry = ctk.CTkEntry(self.initial_frame, textvariable=self.com_port)
        self.com_port_entry.pack(pady=5)

        ctk.CTkLabel(self.initial_frame, text="Baud Rate:").pack(pady=5)
        self.baud_rate_entry = ctk.CTkEntry(self.initial_frame, textvariable=self.baud_rate)
        self.baud_rate_entry.pack(pady=5)

        self.status_label = ctk.CTkLabel(self.initial_frame, text="")
        self.status_label.pack(pady=5)

        connect_button = ctk.CTkButton(self.initial_frame, text="Connect", command=self.connect)
        connect_button.pack(pady=10)

    def create_chat_page(self):
        self.initial_frame.destroy()

        # Header
        header_frame = ctk.CTkFrame(self.root, fg_color="#d73c6b")
        header_frame.pack(fill=ctk.X)
        header_label = ctk.CTkLabel(header_frame, text="Welcome to LoRa Messenger", fg_color="#d73c6b", text_color="white", font=("Arial", 16))
        header_label.pack(pady=10)

        # Conversation area
        self.conversation_area = ctk.CTkTextbox(self.root, wrap=ctk.WORD, state='disabled', fg_color="#2c2f33", text_color="white", font=("Arial", 12))
        self.conversation_area.pack(padx=10, pady=10, fill=ctk.BOTH, expand=True)

        # Message entry area
        message_frame = ctk.CTkFrame(self.root, fg_color="#2c2f33")
        message_frame.pack(padx=10, pady=5, fill=ctk.X)
        self.message_entry = ctk.CTkEntry(message_frame, font=("Arial", 12))
        self.message_entry.pack(side=ctk.LEFT, fill=ctk.X, expand=True, padx=5)
        self.message_entry.bind("<Return>", lambda event: self.send_message())
        send_button = ctk.CTkButton(message_frame, text="Send", command=self.send_message)
        send_button.pack(side=ctk.RIGHT, padx=5)

    def connect(self):
        port = self.com_port.get()
        baudrate = int(self.baud_rate.get())

        try:
            self.ser = serial.Serial(port, baudrate, timeout=1)
            self.status_label.configure(text=f"Connected to {port} with baud rate {baudrate}")
            self.create_chat_page()
            self.start_receiving()
        except serial.SerialException as e:
            self.status_label.configure(text=f"Error: {e}")

    def send_message(self):
        message = self.message_entry.get()
        if self.ser and self.ser.is_open:
            self.ser.write(message.encode())
            self.print_output(f"{self.name.get()}: {message}", "self")
            self.message_entry.delete(0, ctk.END)
        else:
            self.print_output("Error: Serial connection is not open.", "system")

    def start_receiving(self):
        self.receive_thread = threading.Thread(target=self.receive_message)
        self.receive_thread.daemon = True
        self.receive_thread.start()

    def receive_message(self):
        while True:
            if self.ser and self.ser.in_waiting > 0:
                message = self.ser.readline().decode().strip()
                if message:
                    self.print_output(message, "other")
            time.sleep(1)

    def print_output(self, message, sender):
        self.conversation_area.configure(state=ctk.NORMAL)
        if sender == "self":
            self.conversation_area.insert(ctk.END, f"{message}\n", "self")
        elif sender == "other":
            self.conversation_area.insert(ctk.END, f"Other: {message}\n", "other")
        else:
            self.conversation_area.insert(ctk.END, f"{message}\n", "system")
        self.conversation_area.configure(state=ctk.DISABLED)
        self.conversation_area.yview(ctk.END)

if __name__ == "__main__":
    ctk.set_appearance_mode("dark")  # Modes: "light", "dark", "system"
    ctk.set_default_color_theme("blue")  # Themes: "blue", "green", "dark-blue"
    root = ctk.CTk()
    app = LoRaMessenger(root)
    root.mainloop()

